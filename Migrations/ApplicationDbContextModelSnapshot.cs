// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stories.Data;

#nullable disable

namespace Stories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActivatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeactivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeactivatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DeactivationReason")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("Stories.Model.AgeRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgeFrom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AgeRestriction", (string)null);
                });

            modelBuilder.Entity("Stories.Model.AnonymousOnline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Connected")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("Disconnected")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AnonymousOnline", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgeRestrictionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArticleAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ArticlePublished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BannedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BannedBy")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Epilog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FirstPublished")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prolog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecommendedAgeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AgeRestrictionId");

                    b.HasIndex("RecommendedAgeGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Article_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategory", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Article_Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderInCollection")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CollectionId");

                    b.ToTable("ArticleCollection", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Article_Read", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isAuthenticated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Article_Readers", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryGroupId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Stories.Model.CategoryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("CategoryGroups", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ClubCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClubDescription")
                        .IsRequired()
                        .HasMaxLength(2560)
                        .HasColumnType("nvarchar(2560)");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Clubs", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Club_Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ClubId");

                    b.ToTable("Club_Articles", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Club_Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Club_Users", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CollectionDescription")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Stories.Model.Collection_Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionCategories", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FlagFilePath")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("PhonePrefix")
                        .HasColumnType("int");

                    b.Property<int>("Timezone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Critic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CriticAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriticId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CriticMessage")
                        .IsRequired()
                        .HasMaxLength(2560)
                        .HasColumnType("nvarchar(2560)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CriticId");

                    b.ToTable("Critics", (string)null);
                });

            modelBuilder.Entity("Stories.Model.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Subject")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailLogs", (string)null);
                });

            modelBuilder.Entity("Stories.Model.EmailRecepients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmailLogId")
                        .HasColumnType("int");

                    b.Property<string>("Error")
                        .HasColumnType("varchar(1024)");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmailLogId");

                    b.ToTable("EmailRecepients", (string)null);
                });

            modelBuilder.Entity("Stories.Model.FavoriteAuthor_Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteAuthorUsers", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Friends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AnsweringAction")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Declined")
                        .HasColumnType("bit");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChatroomName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsAdminMessage")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RecepientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecepientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("Stories.Model.ChatBans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("BanForAllChat")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BannedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ReasonForBan")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUserBans", (string)null);
                });

            modelBuilder.Entity("Stories.Model.ChatElevated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatElevatedUsers", (string)null);
                });

            modelBuilder.Entity("Stories.Model.ChatRoomAdmins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdminHash")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ChatRoomsRoomName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isElevated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomsRoomName");

                    b.ToTable("ChatRoomsAdmins", (string)null);
                });

            modelBuilder.Entity("Stories.Model.ChatRooms", b =>
                {
                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoomType")
                        .HasColumnType("varchar(16)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomName");

                    b.HasIndex("UserId");

                    b.ToTable("ChatRooms", (string)null);
                });

            modelBuilder.Entity("Stories.Model.ChattingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("TimeInChatSuma")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChattingTimes", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("Article_CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("Article_CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Stories.Model.MessageRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("DontShowInBin")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecepientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WasDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("WasRead")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("RecepientId");

                    b.ToTable("MessageRecipients", (string)null);
                });

            modelBuilder.Entity("Stories.Model.OnlineTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("TimeOnline")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OnlineTimes", (string)null);
                });

            modelBuilder.Entity("Stories.Model.RecommendedAgeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AgeGroupName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("HighestAge")
                        .HasColumnType("int");

                    b.Property<int>("LowestAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecommendedAgeGroups", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientAgent")
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("Connected")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("Disconnected")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("Stories.Model.SpamReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WasSpam")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("SpamReports", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Stars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Change")
                        .HasColumnType("datetime2");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Stars", (string)null);
                });

            modelBuilder.Entity("Stories.Model.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Stories.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DeactivatedByAdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeactivatedSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactivatedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Google")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Info")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Microsoft")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DeactivatedByAdminId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ThemeId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Stories.Model.UserChatSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChatBackgroundColor")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ChatFontColor")
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("MessageNotification")
                        .HasColumnType("bit");

                    b.Property<string>("NameFontColor")
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("PrivateMessageNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("SystemMessageNotification")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserChatSettings", (string)null);
                });

            modelBuilder.Entity("Stories.Model.UserInRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChatRoomsRoomName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayedName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoiningTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeavingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomsRoomName");

                    b.HasIndex("UserId");

                    b.ToTable("UsersInRoom", (string)null);
                });

            modelBuilder.Entity("Stories.Model.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActiveSessionsCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("Stories.Model.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BirthDatePrivacy")
                        .HasColumnType("int");

                    b.Property<int>("CountryPrivacy")
                        .HasColumnType("int");

                    b.Property<int>("EmailPrivacy")
                        .HasColumnType("int");

                    b.Property<int>("FrindsPrivacy")
                        .HasColumnType("int");

                    b.Property<int>("LastSeenPrivacy")
                        .HasColumnType("int");

                    b.Property<int>("NamePrivacy")
                        .HasColumnType("int");

                    b.Property<int>("PhonePrivacy")
                        .HasColumnType("int");

                    b.Property<int>("PictureFilePrivacy")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaLinksPrivacy")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<string>("UserRecepientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserSenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserRecepientId", "UserSenderId");

                    b.HasIndex("UserSenderId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Stories.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Stories.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Stories.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stories.Model.Administrator", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Article", b =>
                {
                    b.HasOne("Stories.Model.AgeRestriction", "AgeRestriction")
                        .WithMany("Articles")
                        .HasForeignKey("AgeRestrictionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.RecommendedAgeGroup", "RecommendedAgeGroup")
                        .WithMany("Articles")
                        .HasForeignKey("RecommendedAgeGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AgeRestriction");

                    b.Navigation("RecommendedAgeGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Article_Category", b =>
                {
                    b.HasOne("Stories.Model.Article", "Article")
                        .WithMany("Article_Categories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.Category", "Category")
                        .WithMany("Article_Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Stories.Model.Article_Collection", b =>
                {
                    b.HasOne("Stories.Model.Article", "Article")
                        .WithMany("Article_Collections")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.Collection", "Collection")
                        .WithMany("Article_Collections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Stories.Model.Article_Read", b =>
                {
                    b.HasOne("Stories.Model.Article", "Article")
                        .WithMany("Article_readers")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Article_Readers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Category", b =>
                {
                    b.HasOne("Stories.Model.CategoryGroup", "CategoryGroup")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoryGroup");
                });

            modelBuilder.Entity("Stories.Model.Club", b =>
                {
                    b.HasOne("Stories.Model.User", "Owner")
                        .WithMany("Clubs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Stories.Model.Club_Article", b =>
                {
                    b.HasOne("Stories.Model.Article", "Article")
                        .WithMany("Club_Articles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stories.Model.Club", "Club")
                        .WithMany("Club_Articles")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Stories.Model.Club_Users", b =>
                {
                    b.HasOne("Stories.Model.Club", "Club")
                        .WithMany("Club_Users")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Club_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Collection", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Collection_Categories", b =>
                {
                    b.HasOne("Stories.Model.Category", "Category")
                        .WithMany("Collection_Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.Collection", "Collection")
                        .WithMany("Collection_Categories")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Stories.Model.Critic", b =>
                {
                    b.HasOne("Stories.Model.Article", "Article")
                        .WithMany("Critics")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Critics")
                        .HasForeignKey("CriticId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.EmailLog", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("EmailLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.EmailRecepients", b =>
                {
                    b.HasOne("Stories.Model.EmailLog", "EmailLog")
                        .WithMany("EmailRecepients")
                        .HasForeignKey("EmailLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmailLog");
                });

            modelBuilder.Entity("Stories.Model.FavoriteAuthor_Users", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Authors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stories.Model.User", "Author")
                        .WithMany("Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Friends", b =>
                {
                    b.HasOne("Stories.Model.User", "Friend")
                        .WithMany("UserFriends")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Chat", b =>
                {
                    b.HasOne("Stories.Model.User", "Recepient")
                        .WithMany("Chatting")
                        .HasForeignKey("RecepientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stories.Model.User", "Sender")
                        .WithMany("Chats")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Recepient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Stories.Model.ChatBans", b =>
                {
                    b.HasOne("Stories.Model.User", "AdminUser")
                        .WithMany("UsersAdmins")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stories.Model.User", "BannedUser")
                        .WithMany("UsersBanned")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdminUser");

                    b.Navigation("BannedUser");
                });

            modelBuilder.Entity("Stories.Model.ChatRoomAdmins", b =>
                {
                    b.HasOne("Stories.Model.ChatRooms", null)
                        .WithMany("ChatRoomAdmins")
                        .HasForeignKey("ChatRoomsRoomName");
                });

            modelBuilder.Entity("Stories.Model.ChatRooms", b =>
                {
                    b.HasOne("Stories.Model.User", null)
                        .WithMany("ChatRooms")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Stories.Model.ChattingTime", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("ChattingTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Like", b =>
                {
                    b.HasOne("Stories.Model.Article", "Article")
                        .WithMany("Likes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stories.Model.Article_Category", null)
                        .WithMany("Likes")
                        .HasForeignKey("Article_CategoryId");

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Message", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.MessageRecipient", b =>
                {
                    b.HasOne("Stories.Model.Message", "Message")
                        .WithMany("MessageRecipients")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("MessageRecipients")
                        .HasForeignKey("RecepientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.OnlineTime", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("OnlineTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Session", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.SpamReports", b =>
                {
                    b.HasOne("Stories.Model.Administrator", "Administrator")
                        .WithMany("SpamReports")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.Message", "Message")
                        .WithMany("SpamReports")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("SpamReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Administrator");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.Stars", b =>
                {
                    b.HasOne("Stories.Model.Article", "Article")
                        .WithMany("Stars")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", "User")
                        .WithMany("Stars")
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.User", b =>
                {
                    b.HasOne("Stories.Model.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stories.Model.Administrator", "Administrator")
                        .WithMany("Users")
                        .HasForeignKey("DeactivatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stories.Model.Theme", "Theme")
                        .WithMany("Users")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Administrator");

                    b.Navigation("Country");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("Stories.Model.UserChatSettings", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithOne("UserChatSettings")
                        .HasForeignKey("Stories.Model.UserChatSettings", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.UserInRoom", b =>
                {
                    b.HasOne("Stories.Model.ChatRooms", null)
                        .WithMany("UsersInRooms")
                        .HasForeignKey("ChatRoomsRoomName");

                    b.HasOne("Stories.Model.User", null)
                        .WithMany("UsersInRooms")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Stories.Model.UserSession", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithOne("UserSessions")
                        .HasForeignKey("Stories.Model.UserSession", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Stories.Model.UserSettings", b =>
                {
                    b.HasOne("Stories.Model.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("Stories.Model.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("Stories.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserRecepientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stories.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserSenderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stories.Model.Administrator", b =>
                {
                    b.Navigation("SpamReports");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Stories.Model.AgeRestriction", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Stories.Model.Article", b =>
                {
                    b.Navigation("Article_Categories");

                    b.Navigation("Article_Collections");

                    b.Navigation("Article_readers");

                    b.Navigation("Club_Articles");

                    b.Navigation("Critics");

                    b.Navigation("Likes");

                    b.Navigation("Stars");
                });

            modelBuilder.Entity("Stories.Model.Article_Category", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Stories.Model.Category", b =>
                {
                    b.Navigation("Article_Categories");

                    b.Navigation("Collection_Categories");
                });

            modelBuilder.Entity("Stories.Model.CategoryGroup", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Stories.Model.Club", b =>
                {
                    b.Navigation("Club_Articles");

                    b.Navigation("Club_Users");
                });

            modelBuilder.Entity("Stories.Model.Collection", b =>
                {
                    b.Navigation("Article_Collections");

                    b.Navigation("Collection_Categories");
                });

            modelBuilder.Entity("Stories.Model.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Stories.Model.EmailLog", b =>
                {
                    b.Navigation("EmailRecepients");
                });

            modelBuilder.Entity("Stories.Model.ChatRooms", b =>
                {
                    b.Navigation("ChatRoomAdmins");

                    b.Navigation("UsersInRooms");
                });

            modelBuilder.Entity("Stories.Model.Message", b =>
                {
                    b.Navigation("MessageRecipients");

                    b.Navigation("SpamReports");
                });

            modelBuilder.Entity("Stories.Model.RecommendedAgeGroup", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Stories.Model.Theme", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Stories.Model.User", b =>
                {
                    b.Navigation("Article_Readers");

                    b.Navigation("Articles");

                    b.Navigation("Authors");

                    b.Navigation("ChatRooms");

                    b.Navigation("Chats");

                    b.Navigation("Chatting");

                    b.Navigation("ChattingTimes");

                    b.Navigation("Club_Users");

                    b.Navigation("Clubs");

                    b.Navigation("Collections");

                    b.Navigation("Critics");

                    b.Navigation("EmailLogs");

                    b.Navigation("Friends");

                    b.Navigation("Likes");

                    b.Navigation("MessageRecipients");

                    b.Navigation("Messages");

                    b.Navigation("OnlineTimes");

                    b.Navigation("Sessions");

                    b.Navigation("SpamReports");

                    b.Navigation("Stars");

                    b.Navigation("UserChatSettings");

                    b.Navigation("UserFriends");

                    b.Navigation("UserSessions");

                    b.Navigation("UserSettings");

                    b.Navigation("Users");

                    b.Navigation("UsersAdmins");

                    b.Navigation("UsersBanned");

                    b.Navigation("UsersInRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
