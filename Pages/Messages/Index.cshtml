@page
@model Stories.Pages.Messages.IndexModel
@{
}

<div class="row">
   <div class="col-4" style="text-align:center;">Unread messages: <b><span class="unreadCount"></span></b></div>
   <div class="col-4" style="text-align:center;">All received messages: <span class="allMessagesCount"></span></div>
   <div class="col-4" style="text-align:center;">All deleted messages: <span class="deletedCount"></span></div>
</div>
<hr>
<div class="unreadMessages" style="display: none;">
   <h3> Unread messages </h3>

   <div id="messageList">
   </div>
   <hr />
</div>
<div class="row">
   <div id="messageRead" class="col-10 offset-1" style="display: none;">
   </div>
</div>
<style>
   .tabulator-row {
      height: 2.1em;
   }
</style>
<script src="~/lib/tabulator/js/tabulator.js"></script>

<script>
   var actualPage = "index";

   var messageTable = new Tabulator("#messageList", {
      rowClick: function (e, row) {
         //e - the click event object
         //row - row component
         objectID = row.getData().MessageId;
         ReadMessage(objectID);
      },
      rowMouseEnter: function (e, row) {
         document.body.style.cursor = "pointer";
      },
      rowMouseLeave: function (e, row) {
         document.body.style.cursor = "default";
      },
      index: "MessageId",
      movableRows: true,
      layout: "fitColumns",
      responsiveLayout: "hide",
      tooltips: false,
      addRowPos: "top",
      pagination: "local",
      paginationSize: 10,
      movableColumns: true,
      resizableRows: true,
      selectable: false,
      initialSort: [
         { column: "Sent", dir: "desc" },
      ],
      columns: [
         {
            title: "", field: "MessageId", headerSort: false, formatter: function (cell, formatterParams, onRendered) {
               return "";
            }
         },
         { title: "From:", field: "SenderName", width: 140 },
         { title: "Subject:", field: "Subject", widthGrow: 5 },
         {
            title: "Received At:", field: "Sent", width: 130, formatter: function (cell, formatterParams, onRendered) {
               var d = new Date(cell.getValue());
               var formated = d.getDate() + "/" + (d.getMonth() + 1) + "/" + d.getFullYear() + " " + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();
               return formated;
            }
         },
         {
            title: "Delete", field: "DeleteLink", width: 60, headerSort: false, formatter: function (cell, formatterParams, onRendered) {
               return cell.getValue();
            }
         },
         {
            title: "", field: "WasRead", headerSort: false, width: 0, formatter: function (cell, formatterParams, onRendered) {
               return "";
            }
         },
      ],
      rowFormatter: function (row) {
         //row - row component

         var data = row.getData();

         if (data.WasRead == false) {
            row.getElement().style.fontWeight = "bold";

         }
      },
   });

   Connect.on("receivedMailboxData", (tableData) => {

      if (tableData != "") {
         var data = JSON.parse(tableData);
         messageTable.setData(data)
            .then(function () {
               setTimeout(function () {
                  messageTable.hideColumn("MessageId");
                  messageTable.hideColumn("WasRead");

                  messageTable.redraw();
               }, 100);
               setTimeout(function () {
                  messageTable.hideColumn("WasRead");
                  messageTable.redraw();
               }, 200);

               $(".unreadMessages").show(300);

            });
      }
   });

   Connect.on("NewMessage", (jsonOutput) => {
      Connect.invoke("InitializeMailbox", actualPage).catch(function (err) {
         return console.error(err.toString());
      });
   });

   Connect.on("hideEnvelope", () => {
      $("#newMessages").html("");
      $("#newMessages").hide(300);
   })
</script>